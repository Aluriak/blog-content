Title: TODO
Date: 2019-04-19
Tags: TODO
Authors: Lucas Bourneuf
Summary: TODO
Slug: index-error
lang: fr
translation: false
status: draft


Ces Q/R ont été siphonnées d'[IndexError](), le site d'entraide pour Python en français,
suite à l'annonce de ses mainteneurs que le site allait être shutdown.


<br/>

[TOC]

<br/>



# Question : complexité d'un algorithme récursif
Comment doit-je calculer la complexité d'un algorithme récursif ?
En particulier, je doit calculer la complexité de celui ci :

```python
def guerrier(jour, monstres, pv=10, gold=0, chemin=""):
    if jour >= len(monstres):
        return jour, monstres, pv, gold, chemin
    else:
        # Cas du repos.
        pv_repos = pv + 5 if pv <= 5 else 10
        repos = guerrier(jour+1, monstres, pv_repos, gold, chemin + "A")
        # Cas de l'attaque.
        atq = [0, 0, 0, -1] # J'initialise l'attaque afin d'être sûr de comparer.
        if pv > monstres[jour].force:
            gold_atq = gold + monstres[jour].gold
            pv_atq = pv - monstres[jour].force
            atq = guerrier(jour+1, monstres, pv_atq, gold_atq, chemin + "F")
        return repos if repos[3] >= atq[3] else atq
```

# Réponse : complexité d'un algorithme récursif

*Disclaimer :* je n'y connais pas grand chose en complexité.

En considérant le pseudo-code suivant, qui a AFAIK le même comportement que la fonction de l'OP :

```python
def f(n, m):
    if c1(n, m):
        return n, m
    first_call = f(decay(n), m)
    second_call = f(decay(n), decay(m)) if c2(m) else default_m_and_n
    return first_call if c3(first_call, second_call) else second_call
```

Qui peut, par exemple, être instanciée comme suit :

```python
def f(n, m):
    if n < m:
        return n, m
    first_call = f(n-1, m)
    second_call = second_call = f(n-1, m+n) if m % 2 == 0 else 1, 0
    return first_call if second_call[1] < first_call[1] else second_call
```


Maintenant, pour être plus précis, ça dépend beaucoup des conditions. Si c1 est du style `n < 0`, on est en exponentiel. Si il dépends de m et de n, c'est plus compliqué, puisqu'on peut avoir des branches entières qui se coupent, et qui de fait peuvent casser la complexité.

De la même manière, si `c2` est souvent fausse, la complexité tombe en linéaire puisqu'un appel de fonction ne mène en général qu'à un seul autre appel.

La fonction de l'OP semble tomber dans le cas exponentiel, puisque jour doit atteindre une valeur qui n'est jamais modifiée durant l'exécution de la fonction.





# Question : rapprochement bancaire
http://indexerror.net/4727/qqun-peut-il-mexpliquer-ce-code-de-rapprochement-bancaire
# Réponse : rapprochement bancaire




# Question : licences
J'aimerais choisir la licence la moins contraignante possible, même pour une utilisation commerciale de mon travail.

J’hésite entre l'AGPLv3 et la MIT mais il y a peut être d'autres choix ?

Avant de poser la question, j'ai fait des recherches mais j'ai du mal à saisir les nuances entre tous les types de licence.


# Réponse : licences
Si tu cherche un max de liberté, [the unlicence](http://unlicense.org) est un choix possible : c'est le don au domaine public. Par contre, ça marche potentiellement pas en france, car en france le domaine public c'est la honte nationale.

Juste un détail : [AGPL est contraignante par design](https://fr.wikipedia.org/wiki/GNU_Affero_General_Public_License).

Donc, entre MIT et AGPL, choisis plutôt MIT, qui est considérée less protective que LGPL, elle-même less protective que GPL, elle-même less protective que AGPL.

Qu'une licence ne soit pas reconnu par l'OSI, [ça ne veux pas dire que c'est mal](http://opensource.stackexchange.com/questions/71/is-osi-approval-important-for-a-license#72) : une licence est reconnue par l'OSI lorsqu'elle apporte quelque chose aux licences existantes et est écrite dans les règles de l'art (le droit, donc).
Donc oui, choisir dans les OSI c'est mieux, mais pas obligé tant que ton projet est pas important dans le droit.

Conseil : un informaticien écrit du code, pas des licences. LGPL c'est bien, MIT c'est bien, GPL c'est bien. Quand viendra la question des droits et des licences sur un de tes projets, c'est que ton projet aura des objectifs précis, donc que le choix d'une licence sera guidé par autre chose que *J'aimerais choisir la licence la moins contraignante possible*.
Ce jour là il sera temps de choisir la licence à lui coller, et coller la version courte partout dans tes headers de fichiers, faire des options pour l'afficher à l'utilisateur, bref de faire ton dev GNU et de faire chier tout tes collaborateurs avec les 40 premières lignes qui expliquent que n'importe qui à le droit de faire sa tambouille avec les 20 lignes qui sont en dessous.
D'ici là c'est juste de la branlette intellectuelle (sans réelle base de réflexion en plus, vu que tu ne sais pas (encore) ce que tu dois permettre avec ce code).

Sinon, réveille ton côté écolo : prend celle qui prend le moins de place sur ton disque dur.




# Question : langues dans une GUi
http://indexerror.net/4208/changer-langue-le-th%C3%A8me-dune-application-interactivement
# Réponse : langues dans une GUi




# Question : styling
http://indexerror.net/4131/pr%C3%A9sentation-de-mon-premier-programme
# Réponse : styling




# Question : Python vers C
http://indexerror.net/4639/est-il-possible-de-transformer-un-code-python-en-c
et ça aussi:
http://indexerror.net/4638/cr%C3%A9er-un-packet-python-embarquant-du-c-avec-ctypes
# Réponse : Python vers C




# Question : architecture de CPython
Je cherche un dessin une image montrant l'architecture de Python (comme il en existe une de Linux, oui je sais, rien à voir, mais quand même)
Je n'ose espérer trouver une animation montrant son fonctionnement 


# Réponse : architecture de CPython
Je part du principe que tu veux parler de CPython, l'implémentation de référence du language Python.

Tu peux trouver pas mal de ressources sur le sujet, par exemple [The bricks](http://pyvideo.org/pycon-ca-2016/architecture-of-cpython-the-bricks.html), l'excellent [cpython internals](http://pgbovine.net/cpython-internals.htm), et bien sûr [la doc](https://docs.python.org/devguide/setup.html) qui donne les bases.

Pour l'organisation d'un compilateur/interpréteur, n'importe quelle ressource sur la question fera l'affaire : CPython n'est pas très original de ce point de vue.
